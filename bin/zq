#!/usr/bin/env ruby
#
# Copyright 2010 Ning
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rubygems'
begin
require 'savon'
require 'optparse'
require 'json'
rescue Exception => e
  puts
  puts 'Some of the required dependencies are missing. Install missing gems:'
  puts 'sudo gem install savon OptionParser json'
  puts
end

Savon::Request.log = false

username = nil
password = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: zuora -u <username> -p <password> <query>"
  opts.on("-u", "--user USER", "username") { |u| username = u }
  opts.on("-p", "--pass PASSWORD", "password") { |p| password = p }
  opts.on("-v", "--verbose", "log harder") { Savon::Request.log = true }
end

if ARGV.empty?
  STDOUT.puts opts
  exit 1
end

remainder = opts.parse!(ARGV)
query = remainder.join " "

unless username and password
  STDERR.puts opts
  exit 1
end

client = Savon::Client.new "https://www.zuora.com/apps/services/a/21.0"
client.request.http.ssl_client_auth :verify_mode => OpenSSL::SSL::VERIFY_NONE

response = client.login! do |soap|
  soap.namespace = "http://api.zuora.com/"
  soap.body = {
      "wsdl:username" => username,
      "wsdl:password" => password
  }
end.to_hash

session = response[:login_response][:result][:session]

begin
  response = client.query! do |soap|
    soap.namespace = "http://api.zuora.com/"
    soap.header['wsdl:SessionHeader'] = {"wsdl:session" => session}
    soap.body = {"wsdl:queryString" => query}
  end.to_hash
rescue Savon::SOAPFault => e
  STDERR.puts e.message
  exit 1
end
ignore_fields = [:type, :ns2, :xsi]
result = response[:query_response][:result][:records].reject{|k,v| ignore_fields.include?(k)}
STDOUT.puts result.to_json

